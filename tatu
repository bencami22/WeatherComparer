[1mdiff --git a/weathercomparer/accuweather_requester.go b/weathercomparer/accuweather_requester.go[m
[1mindex 5edb63d..feb3618 100644[m
[1m--- a/weathercomparer/accuweather_requester.go[m
[1m+++ b/weathercomparer/accuweather_requester.go[m
[36m@@ -13,40 +13,48 @@[m [mtype AccuWeather struct {[m
 }[m
 [m
 //WeatherRequest retrieves weather data from accuweather.com[m
[31m-func (provider *AccuWeather) WeatherRequest(country string, city string) WeatherResponse {[m
[32m+[m[32mfunc (provider *AccuWeather) WeatherRequest(country string, city string) (WeatherResponse, error) {[m
 [m
 	//first we must get accuweathers 'LocationKey'[m
[31m-	resp, err := http.Get(provider.Configuration.BaseURL + "locations/v1/cities/" +[m
[32m+[m	[32mresp, err := http.Get(provider.Configuration.BaseURL + "/locations/v1/cities/" +[m
 		country + "/search?apikey=" + provider.Configuration.APIKey + "&q=" + city)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	defer resp.Body.Close()[m
 [m
 	body, err := ioutil.ReadAll(resp.Body)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	//log.Println(string(body))[m
 [m
 	var result []interface{}[m
 	json.Unmarshal([]byte(body), &result)[m
[32m+[m	[32mif err == nil {[m
[32m+[m		[32mlog.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
[32m+[m	[32m}[m
 	locationObj := result[0].(map[string]interface{})[m
 	locationKey := locationObj["Key"].(string)[m
 [m
[31m-	resp, err = http.Get(provider.Configuration.BaseURL + "currentconditions/v1/" + locationKey +[m
[32m+[m	[32mresp, err = http.Get(provider.Configuration.BaseURL + "/currentconditions/v1/" + locationKey +[m
 		"?apikey=" + provider.Configuration.APIKey)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	defer resp.Body.Close()[m
 [m
 	body, err = ioutil.ReadAll(resp.Body)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 [m
[31m-	//log.Println(string(body))[m
[32m+[m	[32mlog.Println(string(body))[m
 [m
 	json.Unmarshal([]byte(body), &result)[m
 	tempObj := result[0].(map[string]interface{})[m
[36m@@ -54,5 +62,5 @@[m [mfunc (provider *AccuWeather) WeatherRequest(country string, city string) Weather[m
 	metricTemperature := t["Metric"].(map[string]interface{})[m
 	temperature := metricTemperature["Value"].(float64)[m
 [m
[31m-	return WeatherResponse{temperature}[m
[32m+[m	[32mreturn WeatherResponse{DegreeCelsius: temperature}, nil[m
 }[m
[1mdiff --git a/weathercomparer/openweather_requester.go b/weathercomparer/openweather_requester.go[m
[1mindex ade9c62..c9261c6 100644[m
[1m--- a/weathercomparer/openweather_requester.go[m
[1m+++ b/weathercomparer/openweather_requester.go[m
[36m@@ -13,17 +13,20 @@[m [mtype OpenWeather struct {[m
 }[m
 [m
 //WeatherRequest retrieves weather data from openweathermap.org[m
[31m-func (provider *OpenWeather) WeatherRequest(country string, city string) WeatherResponse {[m
[32m+[m[32mfunc (provider *OpenWeather) WeatherRequest(country string, city string) (WeatherResponse, error) {[m
[32m+[m
 	resp, err := http.Get(provider.Configuration.BaseURL + "/weather?q=" + city + "," +[m
 		country + "&units=imperial&appid=" + provider.Configuration.APIKey)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	defer resp.Body.Close()[m
 [m
 	body, err := ioutil.ReadAll(resp.Body)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	//log.Println(string(body))[m
 [m
[36m@@ -32,5 +35,6 @@[m [mfunc (provider *OpenWeather) WeatherRequest(country string, city string) Weather[m
 	var tempObj = result["main"].(map[string]interface{})[m
 	var tempinfahrenheight = tempObj["temp"].(float64)[m
 	var temp = Temperature(tempinfahrenheight)[m
[31m-	return WeatherResponse{temp.toCelsius()}[m
[32m+[m
[32m+[m	[32mreturn WeatherResponse{DegreeCelsius: temp.toCelsius()}, nil[m
 }[m
[1mdiff --git a/weathercomparer/provider_requester.go b/weathercomparer/provider_requester.go[m
[1mindex c014af3..58caedc 100644[m
[1m--- a/weathercomparer/provider_requester.go[m
[1m+++ b/weathercomparer/provider_requester.go[m
[36m@@ -2,5 +2,5 @@[m [mpackage weathercomparer[m
 [m
 //ProviderRequestor is the interface for all Weather Provider Requester to implement[m
 type ProviderRequestor interface {[m
[31m-	WeatherRequest(country string, city string) WeatherResponse[m
[32m+[m	[32mWeatherRequest(country string, city string) (WeatherResponse, error)[m
 }[m
[1mdiff --git a/weathercomparer/tests/accuweather_requestor_test.go b/weathercomparer/tests/accuweather_requestor_test.go[m
[1mindex 533be34..48dc2fb 100644[m
[1m--- a/weathercomparer/tests/accuweather_requestor_test.go[m
[1m+++ b/weathercomparer/tests/accuweather_requestor_test.go[m
[36m@@ -1,7 +1,38 @@[m
 package weathercomparer[m
 [m
[31m-import "testing"[m
[32m+[m[32mimport ([m
[32m+[m	[32m"io"[m
[32m+[m	[32m"net/http"[m
[32m+[m	[32m"net/http/httptest"[m
[32m+[m	[32m"testing"[m
[32m+[m
[32m+[m	[32m"weathercomparer"[m
[32m+[m[32m)[m
 [m
 func TestWeatherRequest(t *testing.T) {[m
 [m
[32m+[m	[32mts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32mw.WriteHeader(http.StatusOK)[m
[32m+[m		[32mw.Header().Set("Content-Type", "application/json")[m
[32m+[m		[32mio.WriteString(w, "{\"LocalObservationDateTime\":\"2019-10-31T21:51:00+01:00\",\"EpochTime\":1572555060,\"WeatherText\":\"Some clouds\",\"WeatherIcon\":36,\"HasPrecipitation\":false,\"PrecipitationType\":null,\"IsDayTime\":false,\"Temperature\":{\"Metric\":{\"Value\":16.8,\"Unit\":\"C\",\"UnitType\":17},\"Imperial\":{\"Value\":62.0,\"Unit\":\"F\",\"UnitType\":18}},\"MobileLink\":\"http://m.accuweather.com/en/it/rome/213490/current-weather/213490?lang=en-us\",\"Link\":\"http://www.accuweather.com/en/it/rome/213490/current-weather/213490?lang=en-us\"}")[m
[32m+[m	[32m}))[m
[32m+[m	[32mdefer ts.Close()[m
[32m+[m
[32m+[m	[32mw := httptest.NewRecorder()[m
[32m+[m	[32mconfigs := weathercomparer.WebAPIConfigs{[m
[32m+[m		[32mBaseURL: ts.URL,[m
[32m+[m		[32mAPIKey:  "NA",[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mrequestor := &weathercomparer.AccuWeather{Configuration: configs}[m
[32m+[m	[32mprint(requestor)[m
[32m+[m	[32mresponse := weathercomparer.ProviderRequestor.WeatherRequest(requestor, "IT", "ROME")[m
[32m+[m
[32m+[m	[32mif response.DegreeCelsius != 1 {[m
[32m+[m		[32mt.Fatalf("Expected Status OK but got %v", w.Body.String())[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif w.Code != http.StatusOK {[m
[32m+[m		[32mt.Fatalf("Expected 200 but got %v", w.Code)[m
[32m+[m	[32m}[m
 }[m
[1mdiff --git a/weathercomparer/weather_response.go b/weathercomparer/weather_response.go[m
[1mindex cec50d5..4d0b965 100644[m
[1m--- a/weathercomparer/weather_response.go[m
[1m+++ b/weathercomparer/weather_response.go[m
[36m@@ -2,5 +2,5 @@[m [mpackage weathercomparer[m
 [m
 //WeatherResponse represent the common data response from ProviderRequestors[m
 type WeatherResponse struct {[m
[31m-	degreeCelsius float64[m
[32m+[m	[32mDegreeCelsius float64[m
 }[m
[1mdiff --git a/weathercomparer/weatherbit_requester.go b/weathercomparer/weatherbit_requester.go[m
[1mindex 667e709..6247099 100644[m
[1m--- a/weathercomparer/weatherbit_requester.go[m
[1m+++ b/weathercomparer/weatherbit_requester.go[m
[36m@@ -13,18 +13,21 @@[m [mtype WeatherBit struct {[m
 }[m
 [m
 //WeatherRequest retrieves weather data from weatherbit.io[m
[31m-func (provider *WeatherBit) WeatherRequest(country string, city string) WeatherResponse {[m
[31m-	resp, err := http.Get(provider.Configuration.BaseURL + "current?city=" + city +[m
[32m+[m[32mfunc (provider *WeatherBit) WeatherRequest(country string, city string) (WeatherResponse, error) {[m
[32m+[m	[32mresp, err := http.Get(provider.Configuration.BaseURL + "/current?city=" + city +[m
 		"&country=" + country + "&key=" + provider.Configuration.APIKey)[m
 [m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
[32m+[m
 	defer resp.Body.Close()[m
 [m
 	body, err := ioutil.ReadAll(resp.Body)[m
 	if err != nil {[m
 		log.Fatalln(err)[m
[32m+[m		[32mreturn WeatherResponse{}, err[m
 	}[m
 	//log.Println(string(body))[m
 [m
[36m@@ -34,5 +37,5 @@[m [mfunc (provider *WeatherBit) WeatherRequest(country string, city string) WeatherR[m
 	var bla = temp[0].(map[string]interface{})[m
 	var finaltemp = bla["temp"].(float64)[m
 [m
[31m-	return WeatherResponse{finaltemp}[m
[32m+[m	[32mreturn WeatherResponse{DegreeCelsius: finaltemp}, nil[m
 }[m
[1mdiff --git a/webapi/main.go b/webapi/main.go[m
[1mindex 0fbaebc..cf9fec8 100644[m
[1m--- a/webapi/main.go[m
[1m+++ b/webapi/main.go[m
[36m@@ -5,6 +5,7 @@[m [mimport ([m
 	"os"[m
 [m
 	"github.com/bencami22/WeatherComparer/weathercomparer"[m
[32m+[m	[32m//"weathercomparer"[m
 [m
 	"github.com/tkanos/gonfig"[m
 )[m
[36m@@ -17,7 +18,6 @@[m [mfunc main() {[m
 }[m
 [m
 func run() error {[m
[31m-[m
 	configuration := weathercomparer.Configuration{}[m
 	err := gonfig.GetConf("configuration.json", &configuration)[m
 	if err != nil {[m
[36m@@ -30,12 +30,24 @@[m [mfunc run() error {[m
 		&weathercomparer.AccuWeather{Configuration: configuration.AccuWeatherConfiguration},[m
 	}[m
 	for _, v := range providers {[m
[31m-		tempChannel := make(chan weathercomparer.WeatherResponse)[m
[32m+[m		[32mtempChannel := make(chan weathercomparer.WeatherResponse, 1)[m
[32m+[m		[32merrChannel := make(chan error, 1)[m
 		go func() {[m
[31m-			tempChannel <- weathercomparer.ProviderRequestor.WeatherRequest(v, "IT", "ROME")[m
[31m-			close(tempChannel)[m
[32m+[m			[32mdefer close(tempChannel)[m
[32m+[m			[32mdefer close(errChannel)[m
[32m+[m			[32mweatherResponse, err := weathercomparer.ProviderRequestor.WeatherRequest(v, "IT", "ROME")[m
[32m+[m			[32mif err == nil {[m
[32m+[m				[32mtempChannel <- weatherResponse[m
[32m+[m				[32mreturn[m
[32m+[m			[32m}[m
[32m+[m			[32mprint(err)[m
[32m+[m			[32merrChannel <- err[m
 		}()[m
[31m-		fmt.Println(<-tempChannel)[m
[32m+[m		[32mweatherResponse := <-tempChannel[m
[32m+[m		[32merr := <-errChannel[m
[32m+[m		[32mfmt.Println(weatherResponse)[m
[32m+[m		[32mfmt.Println(err)[m
[32m+[m
 	}[m
 	return nil[m
 }[m
[1mdiff --git a/webapi/webapi b/webapi/webapi[m
[1mindex 5163106..351e7ca 100755[m
Binary files a/webapi/webapi and b/webapi/webapi differ
